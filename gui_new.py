"""–ú–æ–¥—É–ª—å —Å –∫–ª–∞—Å—Å–∞–º–∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤."""

import os
import tkinter as tk
from tkinter import ttk, messagebox, font, Menu, Toplevel, IntVar
from queue import Empty
from platform import system

from config import LANGUAGE_CODES, TRANSLATORS, gui_queue, stop_event
from utils import list_audio_devices, check_dependencies

# –î–æ–±–∞–≤–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ detached.py (–∏–ª–∏ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö)
def emoji_img(size, emoji, dark=False):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —ç–º–æ–¥–∑–∏."""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —ç–º–æ–¥–∑–∏, –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    return None

def beep():
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª."""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞, –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    pass

class DraggableHtmlLabel(tk.Text):
    """–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è."""

    def __init__(self, parent, root, **kwargs):
        tk.Text.__init__(self, parent, **kwargs)
        self.root = root
        self._offsetx = 0
        self._offsety = 0
        self.bind("<Button-1>", self.click)
        self.bind("<B1-Motion>", self.drag)

    def click(self, event):
        """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–ª–∏–∫."""
        self._offsetx = event.x_root - self.root.winfo_x()
        self._offsety = event.y_root - self.root.winfo_y()

    def drag(self, event):
        """–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞."""
        x = event.x_root - self._offsetx
        y = event.y_root - self._offsety
        self.root.geometry(f"+{x}+{y}")

class SubtitleWindow:
    """–û—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""

    def __init__(self, master, title, win_type="main", font_size=20):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞.

        Args:
            master: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            win_type: –¢–∏–ø –æ–∫–Ω–∞ (main, tc - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, tl - –ø–µ—Ä–µ–≤–æ–¥)
            font_size: –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        """
        dark = False  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        self.close_emoji = emoji_img(16, "‚ùå", dark)
        self.copy_emoji = emoji_img(16, "üìã", dark)
        self.pin_emoji = emoji_img(16, "üìå", dark)
        self.help_emoji = emoji_img(16, "‚ùì", dark)
        self.title_emoji = emoji_img(16, "ü™ü", dark)
        self.up_emoji = emoji_img(16, "‚¨ÜÔ∏è", dark)
        self.down_emoji = emoji_img(16, "‚¨áÔ∏è", dark)

        self.master = master
        self.title = title
        self.root = Toplevel(master)
        self.root.title(title)
        self.root.geometry("800x300")  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.root.minsize(200, 50)
        self.root.configure(background="#f5f5f5")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.win_type = win_type
        self.win_str = title
        self.x_menu = 0
        self.y_menu = 0
        self.cur_opac = 1.0
        self.always_on_top = IntVar()
        self.no_tooltip = IntVar()
        self.no_title_bar = IntVar()
        self.click_through = IntVar()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self.lbl_text = DraggableHtmlLabel(self.root, self.root)
        self.lbl_text.configure(
            background="#f5f5f5",
            font=("Helvetica", font_size),
            wrap="word",
            cursor="hand2"
        )
        self.lbl_text.pack(side="top", fill="both", expand=True)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        self.hidden_sb_y = ttk.Scrollbar(self.root, orient="vertical")
        self.hidden_sb_y.pack(side="right", fill="y")
        self.lbl_text.configure(yscrollcommand=self.hidden_sb_y.set)
        self.hidden_sb_y.configure(command=self.lbl_text.yview)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self._create_menu()

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self._setup_bindings()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._init_settings()

        # –í—Å—Ç–∞–≤–∏–º —Ç–µ–∫—Å—Ç-–∑–∞–≥–ª—É—à–∫—É
        self.lbl_text.insert("1.0", "–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.show()

    def _create_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–∫–Ω–∞."""
        self.menu_dropdown = Menu(self.root, tearoff=0)
        self.menu_dropdown.add_command(label=self.title, command=self.open_menu,
                                      image=self.title_emoji, compound="left")
        self.menu_dropdown.add_command(label="–ü–æ–º–æ—â—å", command=self.show_help,
                                      image=self.help_emoji, compound="left")
        self.menu_dropdown.add_command(
            label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            command=self.copy_tb_content,
            accelerator="Alt + C",
            image=self.copy_emoji,
            compound="left",
        )
        self.menu_dropdown.add_separator()
        self.menu_dropdown.add_checkbutton(
            label="–°–∫—Ä—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫",
            command=lambda: self.toggle_title_bar(from_keybind=False),
            onvalue=1,
            offvalue=0,
            variable=self.no_title_bar,
            accelerator="Alt + T",
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Windows —Ñ—É–Ω–∫—Ü–∏–∏
        if system() == "Windows":
            self.menu_dropdown.add_checkbutton(
                label="–ü—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –æ–∫–Ω–æ",
                command=lambda: self.toggle_click_through(from_keybind=False),
                onvalue=1,
                offvalue=0,
                variable=self.click_through,
                accelerator="Alt + S",
            )

        self.menu_dropdown.add_checkbutton(
            label="–ü–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω",
            command=lambda: self.toggle_always_on_top(from_keybind=False),
            onvalue=1,
            offvalue=0,
            variable=self.always_on_top,
            accelerator="Alt + O",
            image=self.pin_emoji,
            compound="right",
        )
        self.menu_dropdown.add_separator()
        self.menu_dropdown.add_command(
            label="–£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–∞ 0.1",
            command=self.increase_opacity,
            accelerator="Alt + –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö",
            image=self.up_emoji,
            compound="left",
        )
        self.menu_dropdown.add_command(
            label="–£–º–µ–Ω—å—à–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–∞ 0.1",
            command=self.decrease_opacity,
            accelerator="Alt + –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑",
            image=self.down_emoji,
            compound="left",
        )
        self.menu_dropdown.add_separator()
        self.menu_dropdown.add_command(label="–ó–∞–∫—Ä—ã—Ç—å", command=self.on_closing,
                                      image=self.close_emoji, compound="left")

    def _setup_bindings(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∞–≤–∏—à –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π."""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

        # –ü—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        self.root.bind("<Button-3>", self.open_menu)

        # –ü—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∞–≤–∏—à
        if system() == "Windows":
            self.root.bind("<Alt-KeyPress-s>", lambda event: self.toggle_click_through())
        self.root.bind("<Alt-KeyPress-c>", lambda event: self.copy_tb_content())
        self.root.bind("<Alt-KeyPress-t>", lambda event: self.toggle_title_bar())
        self.root.bind("<Alt-KeyPress-o>", lambda event: self.toggle_always_on_top())
        self.root.bind("<Alt-MouseWheel>", self.change_opacity)

    def _init_settings(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞."""
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        self.always_on_top.set(1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω
        self.toggle_always_on_top(from_keybind=False, on_init=True)

        self.no_title_bar.set(0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        self.toggle_title_bar(from_keybind=False, on_init=True)

        if system() == "Windows":
            self.click_through.set(0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            self.toggle_click_through(from_keybind=False, on_init=True)

    def open_menu(self, event=None):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é."""
        if event:
            self.x_menu = event.x_root
            self.y_menu = event.y_root
            self.menu_dropdown.post(event.x_root, event.y_root)
        else:
            self.menu_dropdown.post(self.x_menu, self.y_menu)

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
        extra = "- Alt + s –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏\n" if system() == "Windows" else ""

        messagebox.showinfo(
            f"{self.title} - –°–ø—Ä–∞–≤–∫–∞",
            "–≠—Ç–æ –æ–∫–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–µ—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ.\n\n"
            "–°–æ—á–µ—Ç–∞–Ω–∏—è –∫–ª–∞–≤–∏—à:\n"
            "- Alt + –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏\n"
            "- Alt + c –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞\n"
            "- Alt + t –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞\n"
            f"{extra}"
            "- Alt + o –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ '–ø–æ–≤–µ—Ä—Ö –æ–∫–æ–Ω'\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∑–∞–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –æ–∫–Ω–æ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ -> –ó–∞–∫—Ä—ã—Ç—å"
        )

    def toggle_title_bar(self, from_keybind=True, on_init=False):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞."""
        if from_keybind:
            self.no_title_bar.set(0 if self.no_title_bar.get() == 1 else 1)

        if not on_init:
            beep()

        self.root.overrideredirect(True if self.no_title_bar.get() == 1 else False)

    def toggle_click_through(self, from_keybind=True, on_init=False):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏. –¢–æ–ª—å–∫–æ –¥–ª—è Windows."""
        if system() != "Windows":
            return

        if from_keybind:
            self.click_through.set(0 if self.click_through.get() == 1 else 1)

        if not on_init:
            beep()

        if self.click_through.get() == 1:
            self.root.wm_attributes("-transparentcolor", "#f5f5f5")
        else:
            self.root.wm_attributes("-transparentcolor", "")

    def toggle_always_on_top(self, from_keybind=True, on_init=False):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º '–ø–æ–≤–µ—Ä—Ö –æ–∫–æ–Ω'."""
        if from_keybind:
            self.always_on_top.set(0 if self.always_on_top.get() == 1 else 1)

        if not on_init:
            beep()

        self.root.wm_attributes("-topmost", True if self.always_on_top.get() == 1 else False)

    def show(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–∫–Ω–æ."""
        self.root.wm_deiconify()
        self.root.attributes("-alpha", 1)

        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –æ–∫–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
        self.center_window()

        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
        if system() == "Windows" and self.click_through.get() == 1:
            self.click_through.set(0)
            self.root.wm_attributes("-transparentcolor", "")

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ."""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry('{}x{}+{}+{}'.format(width, height, x, y))

    def on_closing(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞."""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ
            if stop_event:
                stop_event.set()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.master.quit()
            self.master.destroy()
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            os._exit(0)

    def increase_opacity(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–∫–Ω–∞ –Ω–∞ 0.1."""
        self.cur_opac += 0.1
        if self.cur_opac > 1:
            self.cur_opac = 1
        self.root.attributes("-alpha", self.cur_opac)

    def decrease_opacity(self):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–∫–Ω–∞ –Ω–∞ 0.1."""
        self.cur_opac -= 0.1
        if self.cur_opac < 0.1:
            self.cur_opac = 0.1
        self.root.attributes("-alpha", self.cur_opac)

    def change_opacity(self, event):
        """–ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–∫–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π."""
        if event.delta > 0:
            self.cur_opac += 0.1
        else:
            self.cur_opac -= 0.1

        if self.cur_opac > 1:
            self.cur_opac = 1
        elif self.cur_opac < 0.1:
            self.cur_opac = 0.1

        self.root.attributes("-alpha", self.cur_opac)

    def copy_tb_content(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        self.root.clipboard_clear()
        self.root.clipboard_append(self.lbl_text.get("1.0", "end"))

    def update_text(self, text):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –æ–∫–Ω–µ."""
        self.lbl_text.delete("1.0", "end")
        self.lbl_text.insert("1.0", text)
        self.lbl_text.see("end")  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É


class SettingsDialog:
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞, –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞."""

    def __init__(self, root):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫.

        Args:
            root: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç Tkinter
        """
        self.root = root
        self.root.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.root.geometry("700x650")  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
        self.root.resizable(True, True)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.root.minsize(600, 600)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        self.selected_device = tk.IntVar(value=0)
        self.font_size = tk.IntVar(value=20)
        self.model_name = tk.StringVar(value="moonshine/base")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        self.translator_type = tk.StringVar(value="none")
        self.source_lang = tk.StringVar(value="en")
        self.target_lang = tk.StringVar(value="ru")
        self.m2m_model_size = tk.StringVar(value="small")
        self.easynmt_model = tk.StringVar(value="opus-mt")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–±–æ—Ä–∞
        self.result = {
            "device": 0,
            "font_size": 20,
            "model_name": "moonshine/base",
            "translator": {
                "type": "none",
                "source_lang": "en",
                "target_lang": "ru",
                "m2m_model_size": "small",
                "easynmt_model": "opus-mt"
            },
            "cancelled": False
        }

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.devices = list_audio_devices()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.dependencies = check_dependencies()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()

    def center_window(self):
        """–†–∞–∑–º–µ—â–∞–µ—Ç –æ–∫–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞."""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry('{}x{}+{}+{}'.format(width, height, x, y))

    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_canvas = tk.Canvas(self.root)
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=main_canvas.yview)

        main_frame = ttk.Frame(main_canvas)
        main_frame.bind(
            "<Configure>",
            lambda e: main_canvas.configure(scrollregion=main_canvas.bbox("all"))
        )

        main_canvas.create_window((0, 0), window=main_frame, anchor="nw")
        main_canvas.configure(yscrollcommand=scrollbar.set)

        main_canvas.pack(side="left", fill="both", expand=True, padx=10, pady=10)
        scrollbar.pack(side="right", fill="y")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = ttk.Label(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤", font=("Helvetica", 16, "bold"))
        header_label.pack(pady=(0, 20))

        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        model_frame = ttk.LabelFrame(main_frame, text="–ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", padding=10)
        model_frame.pack(fill=tk.X, padx=5, pady=5)

        ttk.Radiobutton(model_frame, text="Moonshine Base (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)", variable=self.model_name, value="moonshine/base").pack(anchor=tk.W)
        ttk.Radiobutton(model_frame, text="Moonshine Tiny (–±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω–µ–µ —Ç–æ—á–Ω–∞—è)", variable=self.model_name, value="moonshine/tiny").pack(anchor=tk.W)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
        translation_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞", padding=10)
        translation_frame.pack(fill=tk.X, padx=5, pady=5)

        # –í—ã–±–æ—Ä –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        translator_frame = ttk.Frame(translation_frame)
        translator_frame.pack(fill=tk.X, padx=5, pady=5)
        ttk.Label(translator_frame, text="–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫:").pack(side=tk.LEFT, padx=(0, 10))
        translator_combo = ttk.Combobox(translator_frame, textvariable=self.translator_type, state="readonly")
        translator_combo['values'] = list(TRANSLATORS.keys())
        translator_combo.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –í—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
        source_frame = ttk.Frame(translation_frame)
        source_frame.pack(fill=tk.X, padx=5, pady=5)
        ttk.Label(source_frame, text="–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫:").pack(side=tk.LEFT, padx=(0, 10))
        source_combo = ttk.Combobox(source_frame, textvariable=self.source_lang, state="readonly")
        source_combo['values'] = list(LANGUAGE_CODES.keys())
        source_combo.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞
        target_frame = ttk.Frame(translation_frame)
        target_frame.pack(fill=tk.X, padx=5, pady=5)
        ttk.Label(target_frame, text="–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫:").pack(side=tk.LEFT, padx=(0, 10))
        target_combo = ttk.Combobox(target_frame, textvariable=self.target_lang, state="readonly")
        target_combo['values'] = list(LANGUAGE_CODES.keys())
        target_combo.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è M2M100
        m2m_frame = ttk.LabelFrame(translation_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ M2M100")
        m2m_frame.pack(fill=tk.X, padx=5, pady=5)

        ttk.Radiobutton(m2m_frame, text="–ú–∞–ª–∞—è –º–æ–¥–µ–ª—å (418M, –±—ã—Å—Ç—Ä–µ–µ)", variable=self.m2m_model_size, value="small").pack(anchor=tk.W, padx=5, pady=2)
        ttk.Radiobutton(m2m_frame, text="–ë–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å (1.2B, —Ç–æ—á–Ω–µ–µ)", variable=self.m2m_model_size, value="large").pack(anchor=tk.W, padx=5, pady=2)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ M2M100
        m2m_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if self.dependencies["m2m100"] else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        ttk.Label(m2m_frame, text=f"–°—Ç–∞—Ç—É—Å: {m2m_status}", foreground="green" if self.dependencies["m2m100"] else "red").pack(anchor=tk.W, padx=5, pady=2)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è EasyNMT
        easynmt_frame = ttk.LabelFrame(translation_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ EasyNMT")
        easynmt_frame.pack(fill=tk.X, padx=5, pady=5)

        easynmt_model_frame = ttk.Frame(easynmt_frame)
        easynmt_model_frame.pack(fill=tk.X, padx=5, pady=2)
        ttk.Label(easynmt_model_frame, text="–ú–æ–¥–µ–ª—å:").pack(side=tk.LEFT, padx=(0, 10))
        easynmt_combo = ttk.Combobox(easynmt_model_frame, textvariable=self.easynmt_model, state="readonly")
        easynmt_combo['values'] = ["opus-mt", "m2m_100_418M", "m2m_100_1.2B", "mbart50_m2m"]
        easynmt_combo.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ EasyNMT
        easynmt_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if self.dependencies["easynmt"] else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        ttk.Label(easynmt_frame, text=f"–°—Ç–∞—Ç—É—Å: {easynmt_status}", foreground="green" if self.dependencies["easynmt"] else "red").pack(anchor=tk.W, padx=5, pady=2)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ Argos
        argos_frame = ttk.LabelFrame(translation_frame, text="Argos Translate")
        argos_frame.pack(fill=tk.X, padx=5, pady=5)

        argos_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if self.dependencies["argos"] else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        ttk.Label(argos_frame, text=f"–°—Ç–∞—Ç—É—Å: {argos_status}", foreground="green" if self.dependencies["argos"] else "red").pack(anchor=tk.W, padx=5, pady=2)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        def update_translator_options(*args):
            is_translator_active = self.translator_type.get() != "none"
            is_m2m100 = self.translator_type.get() == "m2m100"
            is_easynmt = self.translator_type.get() == "easynmt"

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for widget in source_frame.winfo_children():
                if isinstance(widget, ttk.Combobox):
                    widget.config(state="readonly" if is_translator_active else "disabled")

            for widget in target_frame.winfo_children():
                if isinstance(widget, ttk.Combobox):
                    widget.config(state="readonly" if is_translator_active else "disabled")

            for widget in m2m_frame.winfo_children():
                if isinstance(widget, ttk.Radiobutton):
                    widget.config(state="normal" if is_m2m100 else "disabled")

            for widget in easynmt_model_frame.winfo_children():
                if isinstance(widget, ttk.Combobox):
                    widget.config(state="readonly" if is_easynmt else "disabled")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            translator_deps_status = ""
            if self.translator_type.get() == "argos" and not self.dependencies["argos"]:
                translator_deps_status = "‚ö†Ô∏è Argos Translate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install argostranslate"
            elif self.translator_type.get() == "m2m100" and not self.dependencies["m2m100"]:
                translator_deps_status = "‚ö†Ô∏è M2M100 —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install torch transformers sentencepiece sacremoses"
            elif self.translator_type.get() == "easynmt" and not self.dependencies["easynmt"]:
                translator_deps_status = "‚ö†Ô∏è EasyNMT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install easynmt"

            if translator_deps_status:
                self.translator_warning_label.config(text=translator_deps_status, foreground="red")
                self.translator_warning_label.pack(fill=tk.X, padx=5, pady=5)
            else:
                self.translator_warning_label.pack_forget()

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        self.translator_type.trace_add("write", update_translator_options)

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
        self.translator_warning_label = ttk.Label(translation_frame, text="", wraplength=550)

        # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∫–æ–º–±–æ–±–æ–∫—Å - –æ–ø–∏—Å–∞–Ω–∏–µ
        translator_desc_frame = ttk.Frame(translation_frame)
        translator_desc_frame.pack(fill=tk.X, padx=5, pady=5)

        translator_desc = {
            "none": "–ë–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ",
            "argos": "Argos Translate: –ª–µ–≥–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–ª–∞–π–Ω (~100-200 –ú–ë –Ω–∞ —è–∑—ã–∫–æ–≤—É—é –ø–∞—Ä—É)",
            "m2m100": "M2M100: –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –æ—Ç Meta AI (~1.8-5 –ì–ë, —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤)",
            "easynmt": "EasyNMT: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"
        }

        self.translator_desc_label = ttk.Label(translator_desc_frame, text=translator_desc[self.translator_type.get()], wraplength=500)
        self.translator_desc_label.pack(fill=tk.X, padx=5, pady=5)

        def update_desc(*args):
            self.translator_desc_label.config(text=translator_desc[self.translator_type.get()])

        self.translator_type.trace_add("write", update_desc)

        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_frame = ttk.LabelFrame(main_frame, text="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞ –∑–≤—É–∫–∞", padding=10)
        device_frame.pack(fill=tk.X, padx=5, pady=5)

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_canvas = tk.Canvas(device_frame, height=150)
        device_scrollbar = ttk.Scrollbar(device_frame, orient="vertical", command=device_canvas.yview)
        device_scrollable_frame = ttk.Frame(device_canvas)

        device_scrollable_frame.bind(
            "<Configure>",
            lambda e: device_canvas.configure(scrollregion=device_canvas.bbox("all"))
        )

        device_canvas.create_window((0, 0), window=device_scrollable_frame, anchor="nw")
        device_canvas.configure(yscrollcommand=device_scrollbar.set)

        device_canvas.pack(side="left", fill="both", expand=True)
        device_scrollbar.pack(side="right", fill="y")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if not self.devices:
            ttk.Label(device_scrollable_frame, text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞").pack(anchor=tk.W)
        else:
            for device in self.devices:
                ttk.Radiobutton(
                    device_scrollable_frame,
                    text=f"ID: {device['id']} - {device['name']}",
                    variable=self.selected_device,
                    value=device['id']
                ).pack(anchor=tk.W, pady=2)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
        font_frame = ttk.LabelFrame(main_frame, text="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞", padding=10)
        font_frame.pack(fill=tk.X, padx=5, pady=5)

        font_scale = ttk.Scale(
            font_frame,
            from_=16,
            to=120,
            orient="horizontal",
            variable=self.font_size,
            command=self.update_font_preview
        )
        font_scale.pack(fill=tk.X, padx=10)

        font_preview_frame = ttk.Frame(font_frame)
        font_preview_frame.pack(fill=tk.X, padx=10, pady=5)

        ttk.Label(font_preview_frame, text="–†–∞–∑–º–µ—Ä: ").pack(side=tk.LEFT)
        self.font_size_label = ttk.Label(font_preview_frame, text="20")
        self.font_size_label.pack(side=tk.LEFT)

        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞
        self.preview_text = tk.Label(
            font_frame,
            text="–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞",
            font=("Helvetica", 20),
            bg="#f0f0f0",
            wraplength=500
        )
        self.preview_text.pack(pady=10, fill=tk.X)

        # –†–∞–∑–¥–µ–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        deps_frame = ttk.LabelFrame(main_frame, text="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", padding=10)
        deps_frame.pack(fill=tk.X, padx=5, pady=5)

        deps_text = (
            "–î–ª—è —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n\n"
            "‚Ä¢ Argos Translate: pip install argostranslate\n"
            "‚Ä¢ M2M100: pip install torch transformers sentencepiece sacremoses\n"
            "‚Ä¢ EasyNMT: pip install easynmt"
        )

        ttk.Label(deps_frame, text=deps_text, wraplength=550, justify="left").pack(fill=tk.X, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=20)

        ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=self.cancel).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.submit).pack(side=tk.RIGHT, padx=5)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–≤—å—é —à—Ä–∏—Ñ—Ç–∞
        self.update_font_preview()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        update_translator_options()

    def update_font_preview(self, *args):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à—Ä–∏—Ñ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞."""
        size = self.font_size.get()
        self.font_size_label.config(text=str(size))
        self.preview_text.config(font=("Helvetica", size))

    def submit(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ."""
        self.result = {
            "device": self.selected_device.get(),
            "font_size": self.font_size.get(),
            "model_name": self.model_name.get(),
            "translator": {
                "type": self.translator_type.get(),
                "source_lang": self.source_lang.get(),
                "target_lang": self.target_lang.get(),
                "m2m_model_size": self.m2m_model_size.get(),
                "easynmt_model": self.easynmt_model.get()
            },
            "cancelled": False
        }
        self.root.destroy()

    def cancel(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–±–æ—Ä –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ."""
        self.result["cancelled"] = True
        self.root.destroy()


class CaptionGUI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤."""

    def __init__(self, root, font_size=20):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI.

        Args:
            root: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç Tkinter
            font_size: –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        """
        self.root = root
        self.root.title("–°—É–±—Ç–∏—Ç—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_initialized = False
        self.font_size = font_size

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        self.translation_window = SubtitleWindow(
            self.root,
            "–ü–µ—Ä–µ–≤–æ–¥",
            win_type="tl",
            font_size=font_size
        )

        # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        root.withdraw()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_interval = 100  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_text = ""
        self.root.after(self.update_interval, self.update_gui)

        # –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        self.is_initialized = True

        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("CaptionGUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def update_gui(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç GUI —Ç–µ–∫—Å—Ç–æ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
        try:
            while True:
                text = gui_queue.get_nowait()



                if text.startswith("STATUS:"):
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    pass
                elif text.startswith("TRANSLATION:"):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                    translation_text = text[12:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                    if translation_text != self.last_text:
                        if self.translation_window:
                            self.translation_window.update_text(translation_text)

                        self.last_text = translation_text
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞
                    # (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
                    if text != self.last_text:
                        if self.translation_window:
                            self.translation_window.update_text(text)

                        self.last_text = text
        except Empty:
            pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–∫—Ä—ã—Ç root
        if self.root.winfo_exists():
            self.root.after(self.update_interval, self.update_gui)

    def exit_application(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ
            if stop_event:
                stop_event.set()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.root.quit()
            self.root.destroy()
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            os._exit(0)